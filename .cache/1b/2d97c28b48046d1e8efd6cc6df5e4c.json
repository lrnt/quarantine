{"id":"node_modules/queue-microtask/index.js","dependencies":[{"name":"/Users/benjaminshafii/git/quarantine/package.json","includedInParent":true,"mtime":1586257658067},{"name":"/Users/benjaminshafii/git/quarantine/.babelrc","includedInParent":true,"mtime":1585218585140},{"name":"/Users/benjaminshafii/git/quarantine/node_modules/queue-microtask/package.json","includedInParent":true,"mtime":1586257655243}],"generated":{"js":"let promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/queue-microtask/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/queue-microtask/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/queue-microtask/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/queue-microtask/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/queue-microtask/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/queue-microtask/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/queue-microtask/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/queue-microtask/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/queue-microtask/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}}],"sources":{"node_modules/queue-microtask/index.js":"let promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n"},"lineCount":9}},"error":null,"hash":"8749fac61455f76845dd214ff6c39879","cacheData":{"env":{}}}